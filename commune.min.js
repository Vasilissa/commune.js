(function(){var Commune,communes,createCommune,makeBlob,root,threadSupport;root=this;communes={};makeBlob=null;Commune=function(){function Commune(fn){var fnString,lastReturnIndex,returnStatement;fnString=fn.toString();if(fnString.match(/this/)){if(typeof console!=="undefined"&&console!==null){console.warn("Commune: Referencing `this` within a worker process will not work.\n`this` will refer to the worker itself.\nThe passed function appears to use it, but the worker will still be created.")}}if((lastReturnIndex=fnString.lastIndexOf("return"))===-1){throw new Error("Commune: Target function has no return statement.")}returnStatement=fnString.substr(lastReturnIndex).replace("return","").replace(/\}$/,"").replace(";","");fnString=fnString.slice(0,lastReturnIndex)+("\nself.postMessage("+returnStatement+");\n}");fnString=fnString.replace(/^function(.+)?\(/,"function communeInit(");fnString+="if(typeof window === 'undefined'){\n"+"self.addEventListener('message', function(e){\n"+"\ncommuneInit.apply(this, e.data);\n});\n}";this.blobUrl=makeBlob(fnString)}Commune.prototype.spawnWorker=function(args,cb){var worker;worker=new Worker(this.blobUrl);worker.addEventListener("message",function(e){cb(e.data);return worker.terminate()});return worker.postMessage(args)};return Commune}();threadSupport=function(){var BlobBuilder,URL,blobConstructor,rawBlob,sliceMethod,testBlob,testString,testUrl,testWorker;blobConstructor=root.BlobBuilder||root.WebKitBlobBuilder||root.MozBlobBuilder||false;try{testBlob=new Blob;BlobBuilder=root.Blob}catch(e){BlobBuilder=blobConstructor}URL=root.URL||root.webkitURL||root.mozURL||false;if(!(BlobBuilder&&URL&&root.Worker)){return false}testString="true";try{if(BlobBuilder===root.Blob){testBlob=new BlobBuilder([testString]);sliceMethod=BlobBuilder.prototype.slice||BlobBuilder.prototype.webkitSlice||BlobBuilder.prototype.mozSlice;rawBlob=sliceMethod.call(testBlob);makeBlob=function(string){var blob;blob=new BlobBuilder([string],{type:"application/javascript"});return URL.createObjectURL(sliceMethod.call(blob))}}else{testBlob=new BlobBuilder;testBlob.append(testString);rawBlob=testBlob.getBlob();makeBlob=function(string){var blob;blob=new BlobBuilder;blob.append(string);return URL.createObjectURL(blob.getBlob())}}testUrl=URL.createObjectURL(rawBlob);testWorker=new Worker(testUrl);testWorker.terminate();return true}catch(e){if(e.name==="SECURITY_ERR"){if(typeof console!=="undefined"&&console!==null){console.warn("Commune: Cannot provision workers when serving"+"via `file://` protocol. Serve over http to use worker threads.")}}return false}}();createCommune=function(fn,args,cb){var commune,fnString;fnString=fn.toString();if(!communes[fnString]){commune=communes[fnString]=new Commune(fn)}else{commune=communes[fnString]}return commune.spawnWorker(args,cb)};root.commune=function(fn,args,cb){var argList,callback;if(typeof fn!=="function"){throw new Error("Commune: Must pass a function as first argument.")}if(threadSupport){if(Array.isArray(args)){argList=args;if(typeof cb==="function"){callback=cb}else{throw new Error("Commune: Must pass a callback to utilize worker result.")}}else if(typeof args==="function"){callback=args;argList=[]}else if(args==null){throw new Error("Commune: Must pass a callback to utilize worker result.")}return createCommune(fn,argList,callback)}else{if(!(args&&cb)){return fn()}if(typeof args==="function"||!args){cb=args;args=[]}return typeof cb==="function"?cb(fn(args)):void 0}};root.commune.isSupported=threadSupport;root.communify=function(fn,args){if(args){return function(cb){return createCommune(fn,args,cb)}}else{return function(args,cb){if(typeof args==="function"){cb=args;args=[]}return createCommune(fn,args,cb)}}}}).call(this);