// Generated by CoffeeScript 1.6.3
(function() {
  var adder, base;

  base = 1e8;

  adder = function(a, b, c) {
    var i, _i;
    if (a == null) {
      a = 0;
    }
    if (b == null) {
      b = 0;
    }
    if (c == null) {
      c = 0;
    }
    for (i = _i = 0; 0 <= 1e8 ? _i <= 1e8 : _i >= 1e8; i = 0 <= 1e8 ? ++_i : --_i) {
      a++;
      b++;
      c++;
    }
    return [a, b, c];
  };

  describe('Commune.js', function() {
    this.timeout(2e4);
    describe('#commune()', function() {
      it('should compute a function', function() {
        return commune(adder, [1, 2, 3], function(r) {
          var a, b, c;
          a = r[0], b = r[1], c = r[2];
          expect(a).to.equal(base + 2);
          expect(b).to.equal(base + 3);
          return expect(c).to.equal(base + 4);
        });
      });
      it('should compute a function without being given arguments', function() {
        return commune(adder, function(r) {
          var a, b, c;
          a = r[0], b = r[1], c = r[2];
          expect(a).to.equal(base + 1);
          expect(b).to.equal(base + 1);
          return expect(c).to.equal(base + 1);
        });
      });
      it('should compute a function without thread support', function() {
        commune.disableThreads();
        return commune(adder, [1, 2, 3], function(r) {
          var a, b, c;
          a = r[0], b = r[1], c = r[2];
          expect(a).to.equal(base + 2);
          expect(b).to.equal(base + 3);
          return expect(c).to.equal(base + 4);
        });
      });
      it('should compute a function without thread support and without arguments', function() {
        commune.disableThreads();
        return commune(adder, function(r) {
          var a, b, c;
          a = r[0], b = r[1], c = r[2];
          expect(a).to.equal(base + 1);
          expect(b).to.equal(base + 1);
          return expect(c).to.equal(base + 1);
        });
      });
      describe('#commune.disableThreads()', function() {
        return it('should disable threading', function() {
          commune.disableThreads();
          return expect(commune.isThreaded()).to.equal(false);
        });
      });
      return describe('#commune.enableThreads()', function() {
        return it('should enable threading', function() {
          commune.enableThreads();
          return expect(commune.isThreaded()).to.equal(true);
        });
      });
    });
    return describe('#communify()', function() {
      it('should return a Commune.js version of a function', function() {
        return communify(adder)([1, 2, 3], function(r) {
          var a, b, c;
          a = r[0], b = r[1], c = r[2];
          expect(a).to.equal(base + 2);
          expect(b).to.equal(base + 3);
          return expect(c).to.equal(base + 4);
        });
      });
      return it('should return a partially applied function when given arguments', function() {
        return communify(adder, [1, 2, 3])(function(r) {
          var a, b, c;
          a = r[0], b = r[1], c = r[2];
          expect(a).to.equal(base + 2);
          expect(b).to.equal(base + 3);
          return expect(c).to.equal(base + 4);
        });
      });
    });
  });

}).call(this);

/*
//@ sourceMappingURL=main.map
*/
